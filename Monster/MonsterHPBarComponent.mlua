@Component
script MonsterHPBarComponent extends Component

	property number beginValue = 0

	property EntityRef hpBar = nil

	property EntityRef frameEntity = nil

	property EntityRef hitBar = nil

	@ExecSpace("Client")
	method void SyncHP(number value)
		value = math.clamp(value,0,1)
		
		self.hpBar.UITransformComponent.RectSize.x = self.beginValue * value
		self.hitBar.UITransformComponent.RectSize.x = self.beginValue - self.hpBar.UITransformComponent.RectSize.x
		
		self.hitBar.SpriteGUIRendererComponent.Color.a = 1.0
		if self._T.hitBarUpdateTimer == nil then
			self._T.hitBarUpdateTimer = _TimerService:SetTimerRepeat(self.HitBarUpdate,0.1)
		end
		
		if self.frameEntity.Enable == false then
			self.frameEntity.Enable = true	
		end 
	end

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		local animationClip = _ResourceService:LoadAnimationClipAndWait(self.Entity.SpriteRendererComponent.SpriteRUID)
		
		-- 첫 번째 프레임의 스프라이트 정보 가져오기
		local firstFrameSprite = animationClip.Frames[1].FrameSprite
		
		-- 스프라이트의 픽셀 단위 높이, 너비, 픽셀당 유닛, 피봇 정보 가져오기
		local spriteHeightInPixels = firstFrameSprite.Height
		local pixelPerUnit = firstFrameSprite.PixelPerUnit
		local spritePivotNormalized = firstFrameSprite.Pivot -- (0.5, 0.5)가 중앙, (0.5, 0)이 하단 중앙 등
		
		-- 엔티티의 현재 스케일(크기) 정보 가져오기
		local entityScale = self.Entity.TransformComponent.Scale
		
		-- 스프라이트의 실제 월드 유닛 크기 계산 (엔티티 스케일 적용)
		local actualSpriteHeightInWorldUnits = (spriteHeightInPixels / pixelPerUnit) * entityScale.y
		
		-- 스프라이트의 피봇을 고려하여 엔티티 로컬 공간에서의 오프셋 계산
		-- 스프라이트의 상단 중앙 위치를 기준
		local localOffsetY = (1.1 - spritePivotNormalized.y) * actualSpriteHeightInWorldUnits -- 1.0은 스프라이트의 가장 상단을 의미
		
		-- 계산된 로컬 오프셋 (Vector3 형태)
		local correctLocalPos = Vector3(0, localOffsetY, 0)
		
		self.frameEntity = _SpawnService:SpawnByModelId("model://a20cc05b-6c79-4c03-8129-0fc27db29125","hp_bar",correctLocalPos,self.Entity)
		self.hpBar = _EntityService:GetEntityByPath(self.frameEntity.Path.."/HP_bar")
		self.beginValue = self.hpBar.UITransformComponent.RectSize.x
		
		self.hitBar = _EntityService:GetEntityByPath(self.frameEntity.Path.."/hit_bar")
		self.frameEntity.Enable = false
	end

	@ExecSpace("Client")
	method void Init()
		self.frameEntity.Enable = false
		self.hpBar.UITransformComponent.RectSize.x = self.beginValue
		self.hitBar.UITransformComponent.RectSize.x = 0
	end

	method void HitBarUpdate()
		self.hitBar.SpriteGUIRendererComponent.Color.a -= 0.05
		
		if self.hitBar.SpriteGUIRendererComponent.Color.a < 0.0 then
		    local id = self._T.hitBarUpdateTimer
		    self._T.hitBarUpdateTimer = nil
		    _TimerService:ClearTimer(id)
		end
	end

	@ExecSpace("ClientOnly")
	method void OnDestroy()
		if self._T.hitBarUpdateTimer ~= nil then
		    _TimerService:ClearTimer(self._T.hitBarUpdateTimer)
		end
	end

end