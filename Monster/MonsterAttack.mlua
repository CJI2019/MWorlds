@Component
script MonsterAttack extends AttackComponent

	@MinValue(0)
	property number AttackInterval = 0.03

	@HideFromInspector
	property any Shape = nil

	@HideFromInspector
	property Vector2 SpriteSize = Vector2(0,0)

	@HideFromInspector
	property Vector2 PositionOffset = Vector2(0,0)

	property number Attack_Timer_Id = 0

	@Sync
	property number Attack_Power = 1

	@ExecSpace("ServerOnly")
	method void OnBeginPlay()
		local monster = self.Entity.Monster
		if not monster then
			return
		end
		
		self.Shape = BoxShape(Vector2.zero, Vector2.one, 0)
		
		-- sprite 사이즈를 가져와 공격 영역으로 사용한다
		_ResourceService:PreloadAsync({self.Entity.SpriteRendererComponent.SpriteRUID}, function()
			local clip = _ResourceService:LoadAnimationClipAndWait(self.Entity.SpriteRendererComponent.SpriteRUID)
			local firstFrameSprite = clip.Frames[1].FrameSprite
			local firstSpriteSizeInPixel = Vector2(firstFrameSprite.Width, firstFrameSprite.Height)
			local ppu = firstFrameSprite.PixelPerUnit
		
			self.SpriteSize = firstSpriteSizeInPixel / ppu
			self.PositionOffset = (firstSpriteSizeInPixel / 2 - firstFrameSprite.PivotPixel:ToVector2()) / ppu
		    --log(self.AttackInterval)
			self:AttackTimerReserve()
		end)
	end

	@ExecSpace("Server")
	method void AttackTimerReserve()
		local monster = self.Entity.Monster	
		if not monster then
			return
		end
		self:AttackTimerClear()
		self.Attack_Timer_Id = _TimerService:SetTimerRepeat(function() 
			if monster.IsDead == false then
				self:AttackNear()
			end
		end, self.AttackInterval)
	end

	@ExecSpace("Server")
	method void AttackTimerClear()
		if self.Attack_Timer_Id ~= nil then
			_TimerService:ClearTimer(self.Attack_Timer_Id)
		end
	end

	method void AttackNear()
		local transformComponent = self.Entity.TransformComponent
		
		if isvalid(transformComponent) then
			local worldPosition = transformComponent.WorldPosition
			local scaleX = transformComponent.Scale.x
			local scaleY = transformComponent.Scale.y
			local radian = math.rad(transformComponent.ZRotation)
		    --local offsetX = math.cos(radian) * self.PositionOffset.x * scaleX - math.sin(radian) * self.PositionOffset.y * scaleY
		    --local offsetY = math.sin(radian) * self.PositionOffset.x * scaleX + math.cos(radian) * self.PositionOffset.y * scaleY
			local offsetX = self.Entity.HitComponent.ColliderOffset.x * scaleX
			local offsetY = self.Entity.HitComponent.ColliderOffset.y * scaleY
		    --self.Shape.Size = Vector2(self.SpriteSize.x * math.abs(scaleX), self.SpriteSize.y * math.abs(scaleY))
			self.Shape.Size = Vector2(self.Entity.HitComponent.BoxSize.x * scaleX,self.Entity.HitComponent.BoxSize.y * scaleY )
			self.Shape.Position = Vector2(worldPosition.x + offsetX, worldPosition.y + offsetY)
			self.Shape.Angle = transformComponent.ZRotation
		end
		--log(123)
		--local entity_collision_simulator = _CollisionService:GetSimulator(self.Entity)
		--local other_component = entity_collision_simulator:Overlap(CollisionGroups.Player,self.Shape)
		--
		--if other_component ~= nil and other_component.Entity.StateComponent.CurrentStateName ~= "DEAD" then
		--    other_component.Entity.HitComponent:OnHit(self.Entity,100,false,nil,1)
		--end
		
		--_TimerService:ClearTimer(self.attack_timer_id)
		self:AttackFast(self.Shape, tostring(self.Shape.Position.x), CollisionGroups.Player)
	end

	method boolean IsAttackTarget(Entity defender, string attackInfo)
		if isvalid(defender.PlayerComponent) == false then
			return false
		end
		
		return __base:IsAttackTarget(defender, attackInfo)
	end

	method integer CalcDamage(Entity attacker, Entity defender, string attackInfo)
		local info = self.Entity.Monster:GetMonsterInfo()
		
		return info.power
	end

end