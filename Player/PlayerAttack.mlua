@Component
script PlayerAttack extends AttackComponent

	@HideFromInspector
	property any Shape = nil

	property Vector3 ProjectileOffset = Vector3(0,0,0)

	property string ProjectileModel = ""

	@Sync
	property number Damage = 10

	@ExecSpace("ServerOnly")
	method void OnBeginPlay()
		self.Shape = BoxShape(Vector2.zero, Vector2(0.45,0.4), 0)
		self._T.allkillShape = BoxShape(Vector2.zero, Vector2(100.4,100.35), 0)
		self:TESTKEY()
	end

	@ExecSpace("Server")
	method void CreateSkillAttack(string skill_Id)
		local skill_Info = _GlobalData:GetSkillInfo(skill_Id)
		
		local attackFunc = function()
			local playerController = self.Entity.PlayerControllerComponent
			local transform = self.Entity.TransformComponent
			if playerController and transform then
			    local worldPosition = transform.WorldPosition
		        local attackOffset = Vector2(
					worldPosition.x + skill_Info.hitOffsetX * playerController.LookDirectionX,
					worldPosition.y + skill_Info.hitOffsetY)
				---@type BoxShape
				local shape = self.Shape
			    shape.Position = attackOffset
		        shape.Size = Vector2(skill_Info.hitBoxSizeX,skill_Info.hitBoxSizeY)
			    
			    if self.Entity.CollisionBoxRendererComponent.Enable then
		            --self:SpawnColliderEntity(attackOffset,shape.Size)
			    end
				
				local entity_collision_simulator = _CollisionService:GetSimulator(self.Entity)
				local other_component = entity_collision_simulator:Overlap(CollisionGroups.Monster,shape)
			    --if other_component ~= nil then
			    --    log(other_component.Entity.Name)
			    --end
				if other_component ~= nil and other_component.Entity.StateComponent.CurrentStateName ~= "DEAD" then
					
		            --local damage = self:CalcDamage(self.Entity,other_component.Entity,nil)
		            --local critical = self:CalcCritical(self.Entity,other_component.Entity,nil)
					local event = MyAttackEvent()
					event.attacker = self.Entity
					event.skillId = skill_Info.id
					other_component.Entity:SendEvent(event)
				end
			end
		end
		
		_TimerService:SetTimerOnce(attackFunc,skill_Info.hitDelay)
	end

	method int CalcDamage(Entity attacker, Entity defender, string attackInfo)
		return self.Damage
	end

	method boolean CalcCritical(Entity attacker, Entity defender, string attackInfo)
		return _UtilLogic:RandomDouble() < 0.3
	end

	method number GetCriticalDamageRate()
		return 2
	end

	@ExecSpace("Client")
	method void SpawnColliderEntity(Vector2 attackOffset, Vector2 Size)
		local collision_entity = _SpawnService:SpawnByModelId(
						"model://maplestorytrap$0c7064fd887a47fcb2732ada78b29b79", -- PlayerNormalAttack_Entity
			    	    "PlayerNormalAttack",
			    	    Vector3(0,0,0),
		                _UserService.LocalPlayer.CurrentMap
				)
		collision_entity.TriggerComponent.ColliderOffset = attackOffset
		collision_entity.TriggerComponent.BoxSize = Size
		--log(attackOffset.x,",",attackOffset.y)
	end

	@ExecSpace("Client")
	method void TESTKEY()
		
		self.Entity.PlayerControllerComponent:SetActionKey(KeyboardKey.Q, "ALLKILL")
	end

	@ExecSpace("Server")
	method void AllKillAttack()
		wait(0.25)
		local playerController = self.Entity.PlayerControllerComponent
		local transform = self.Entity.TransformComponent
		if playerController and transform then
		    local worldPosition = transform.WorldPosition
		    local attackOffset = Vector2(worldPosition.x + 0.35 * playerController.LookDirectionX, worldPosition.y + 0.25)
		    self._T.allkillShape.Position = attackOffset
		    
		    if self.Entity.CollisionBoxRendererComponent.Enable then
		        self:SpawnColliderEntity(attackOffset,self._T.allkillShape.Size)
		    end
			
			local entity_collision_simulator = _CollisionService:GetSimulator(self.Entity)
			local others = entity_collision_simulator:OverlapAll(CollisionGroups.Monster,self._T.allkillShape)
			
			for i = 1,#others do
				local other = others[i]
				if other ~= nil and other.Entity.StateComponent.CurrentStateName ~= "DEAD" then
		            --log(other.Entity.Name)
					other.Entity.HitComponent:OnHit(self.Entity,99999,false,nil,1)
				end
			end
		end
	end

	@ExecSpace("Client")
	method void ClientHit(ComponentRef other, number damage, boolean critical, integer count)
		--for i = 1 , 100 do
		--    wait(0.1)
		--end
		
		--other.Entity.HitComponent:OnHit(self.Entity,damage,critical,nil,1)	
		_DamageSkinService:Play(other.Entity, "3271c3e79bf04ecba9a107d55495970d", 0.1, {9999, 9999, 9999,9999,9999,9999,9999,9999,9999,9999,9999,9999}, DamageSkinTweenType.Default, true)
	end

	method int32 GetDisplayHitCount(string attackInfo)
		return __base:GetDisplayHitCount(attackInfo) + 10
	end

	@ExecSpace("ClientOnly")
	@EventSender("Self")
	handler HandlePlayerActionEvent(PlayerActionEvent event)
		-- Parameters
		local ActionName = event.ActionName
		-- local PlayerEntity = event.PlayerEntity
		--------------------------------------------------------
		if ActionName == "Attack" then
		    self:CreateSkillAttack("1")
		    --log("Attack")
		end
	end

end